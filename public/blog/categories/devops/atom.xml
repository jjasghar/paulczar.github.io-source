<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: devops | tech.paulcz.net]]></title>
  <link href="http://paulczar.github.com/blog/categories/devops/atom.xml" rel="self"/>
  <link href="http://paulczar.github.com/"/>
  <updated>2014-05-13T15:39:20-05:00</updated>
  <id>http://paulczar.github.com/</id>
  <author>
    <name><![CDATA[Paul Czarkowski]]></name>
    <email><![CDATA[username.taken@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[EZBake - A new way to converge docker containers with chef]]></title>
    <link href="http://paulczar.github.com/2014/05/ezbake-a-new-way-to-converge-docker-containers-with-chef.html"/>
    <updated>2014-05-13T15:05:00-05:00</updated>
    <id>http://paulczar.github.com/2014/05/ezbake-a-new-way-to-converge-docker-containers-with-chef</id>
    <content type="html"><![CDATA[<p><code>EZ Bake</code> came from an idea I had while watching the <a href="https://twitter.com/hangops">HangOps</a> <a href="https://www.youtube.com/watch?v=clLFKIeSADo&amp;feature=youtu.be">episode 2014-04-11</a> in which they were talking about <code>Docker</code> and Config Management being complementary rather than adversary.</p>

<p>I have expermented with using <code>Chef</code> and <code>Docker</code> together in the <a href="/2013/09/creating-immutable-servers-with-chef-and-docker-dot-io.html">past</a> but wanted to tackle the problem from a slightly different angle.  I've recently been working on some PAAS stuff, both <a href="http://deis.io">Deis</a> and <a href="http://solum.io">Solum</a> these both utilize the tooling from <a href="https://github.com/flynn/flynn">Flynn</a> which builds heroku style <code>buildpacks</code> in <code>Docker</code>.</p>

<!--more-->


<p>EZ Bake takes chef recipes designed for <code>chef-solo</code> ( but could easily be extended to do the same for <code>chef-zero</code>, or <code>chef-client</code> with a server) in a tarball via <code>stdin</code> and converges a docker node using that recipe.</p>

<p>This methodology seems a little weird at first,  but it gives you the ability to ship your Chef cookbooks as self-contained tarballs, or even more interestingly use the <code>git archive</code> command from your git repository to do this automatically and then pipe that directly to the <code>docker run</code> command.</p>

<p>In order to recognize and run your cookbook ( or repo ) it needs to contain the following files: <code>Berksfile</code>, <code>solo.json</code>, <code>solo.rb</code> in the root of your cookbook.   There is some provision for providing different locations for these via environment variables.   This is pre-ChefDK and will probably become easier with ChefDK.</p>

<p>I have provided an example in the ezbake repo that will install Java7 in the container.</p>

<p>This example shows:</p>

<ul>
<li>Converging a container using a local chef recipe</li>
<li>Committing the container to an image on completion</li>
<li>Removing the build container</li>
<li>Running the new image</li>
</ul>


<p>```
$ git clone paulczar/ezbake
$ cd ezbake/examples
$ ID=$(tar cf - . | sudo docker run -i -a stdin paulczar/ezbake) \
  &amp;&amp; sudo docker attach $ID \
  &amp;&amp; sudo docker commit $ID java7
  &amp;&amp; sudo docker rm $ID</p>

<p>Running Berkshelf to collect your cookbooks:
Installing java (1.22.0) from site: 'http://cookbooks.opscode.com/api/v1/cookbooks'
Converging your container:
[2014-04-12T22:10:24+00:00] INFO: Forking chef instance to converge...
....
[2014-04-12T22:16:52+00:00] INFO: Chef Run complete in 154.563192281 seconds
[2014-04-12T22:16:52+00:00] INFO: Running report handlers
[2014-04-12T22:16:52+00:00] INFO: Report handlers complete</p>

<p>$ sudo docker run -t java7 java -version
java version "1.7.0_51"
Java(TM) SE Runtime Environment (build 1.7.0_51-b13)
Java HotSpot(TM) 64-Bit Server VM (build 24.51-b03, mixed mode)</p>

<p>```</p>

<p>This could easily be built into a CI pipeline.   a git webhook could call jenkins which would clone the repo and then use a command like  <code>git archive master | docker run -i -a stdin paulczar/ezbake</code> to converge a container from it.</p>

<p>It could also very easily be used in <code>Deis</code> or <code>Solum</code> as an alternative to a Heroku buildpack.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Logstash + Opscode Omnibus]]></title>
    <link href="http://paulczar.github.com/2013/05/logstash-plus-opscode-omnibus.html"/>
    <updated>2013-05-06T19:03:00-05:00</updated>
    <id>http://paulczar.github.com/2013/05/logstash-plus-opscode-omnibus</id>
    <content type="html"><![CDATA[<p>At <a href="http://devopsdays.org/events/2013-austin/">DevOps Days Austin</a> <a href="http://twitter.com/mattray">@mattray</a> did an Openspace session on <a href="https://github.com/opscode/omnibus-ruby">Omnibus</a> which is a toolset based around the concept of installing an app and all of it's prerequisites from source into a directory and then building a package ( either .deb or .rpm ) of that using <a href="https://github.com/jordansissel/fpm">fpm</a>.</p>

<p>Having battled many times with OS Packages trying to get newer versions of Ruby, or Redis or other software installed and having to hunt down some random package repo or manually build from source this seems like an excellent idea.</p>

<p>To learn the basics I decided to build an <a href="https://github.com/paulczar/omnibus-fpm">omnibus package for fpm</a> which helped me work out the kinks and learn the basics.</p>

<!--more-->


<p>From there I moved onto something a little more ambitious... <a href="http://logstash.net/">logstash</a>, which is an awesome opensource project for log aggregation and searching.</p>

<p>Using Omnibus I took the Logstash .jar file and bundled in Redis, Kibana, Kibana3(+NodeJS), RabbitMQ, Elasticsearch along with all of their depedencies into a big fat package which installs to /opt/logstash and includes init scripts and default configs for each.</p>

<p>The Logstash Omnibus project can be found <a href="https://github.com/paulczar/omnibus-logstash">here</a>.  I also uploaded the resultant packages for <a href="https://s3-us-west-2.amazonaws.com/paulcz-packages/logstash-omnibus-1.1.10_amd64.deb">Ubuntu 12.04</a> and <a href="https://s3-us-west-2.amazonaws.com/paulcz-packages/logstash-omnibus-1.1.10.el6.x86_64.rpm">RHEL 6</a>.</p>

<p>This gives us a really powerful platform to deploy logstash and all of its prequisites in a completely repeatable manner and not have to worry about the existing versions of Ruby, Java, etc.    It also gives a super simple testing platform where a new user to logstash can install logstash with a single <code>dpkg</code> or <code>rpm</code> command and immediately be able to push logs to it via syslog or redis.</p>

<p>Read more about using and building the <a href="https://github.com/paulczar/omnibus-logstash/blob/master/README.md">Logstash Omnibus package here</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vagrant+Puppet+FPM=Amazeballs]]></title>
    <link href="http://paulczar.github.com/2013/04/vagrant-plus-puppet-plus-fpm-equals-amazeballs.html"/>
    <updated>2013-04-07T18:23:00-05:00</updated>
    <id>http://paulczar.github.com/2013/04/vagrant-plus-puppet-plus-fpm-equals-amazeballs</id>
    <content type="html"><![CDATA[<p>Lately I've been doing a lot of prototyping with <a href="http://www.vagrantup.com/">Vagrant</a>, specifically for a couple of distinct activities:-</p>

<ul>
<li>building puppet modules using <a href="https://github.com/elasticdog/puppet-sandbox">the excellent puppet sandbox</a> project</li>
<li>and building RPM packages with <a href="https://github.com/jordansissel/fpm">FPM</a>.</li>
</ul>


<p>I realized I was spending a bunch of time flipping back and forth between Vagrant environments and I had no quick way to utilize RPMs built with FPM inside my puppet modules.</p>

<!--more-->


<p>An idea was born.   I forked off the <a href="https://github.com/paulczar/puppet-sandbox">puppet sandbox</a> project and added a Yum repo module <code>repository</code> to the standalone puppet provisioner that vagrant uses when it first brings up a box.   It adds a Yum repo on the puppet server called <code>sandbox</code> and adds a repo file to the client boxes pointing to the repo.   Now I can simply push an RPM to <code>packages/rpm</code> and run <code>vagrant provision puppet</code> which reruns puppet and rebuilds the yum repo.</p>

<p>Given that I often flip back and forth between Ubuntu and CentOS boxes I also created <code>Vagrantfile.centos63</code> and <code>Vagrantfile.precise64</code> so I can swiftly destroy the existing environment and bring up another of a different flavour by simply symlinking <code>Vagrantfile</code> to the appropriate file.</p>

<p>This worked out pretty well for a while until I realized I was still jumping back and forth between vagrant environments and I realized I had another improvement to make.   So I then went on to create a definition in the puppet sandbox <code>Vagrantfile</code> file for a <code>FPM server</code> and a new module in the provisioner to install FPM on it.   Given that this module simply adds a few packages this module works for both CentOS and Ubuntu.</p>

<p>I also created a couple of sample scripts to download source and build RPMs for both Redis and Elasticsearch which get pushed via the provisioner to <code>/tmp/redis-rpm.sh</code> and <code>/tmp/elasticsearch-rpm.sh</code></p>

<p>Now ( For CentOS boxes at least ) I can very quickly iterate on puppet modules and create RPM packages on the fly and have them instantly available.   The process is very simple and looks a little something like this :</p>

<p><code>
$ git clone https://github.com/paulczar/puppet-sandbox
$ cd puppet-sandbox
$ vagrant up puppet fpm client1
$ vagrant ssh fpm
[vagrant@fpm ~]$ sudo /tmp/redis-rpm.sh
  ...
  ... A bunch of scrolling text while files are downloaded and rpm is built
  ...
[vagrant@fpm ~]$ exit
$ vagrant provision puppet
$ vagrant ssh client1
[vagrant@client1 ~]$ sudo yum clean all
[vagrant@client1 ~]$ sudo yum -y install redis
[vagrant@client1 ~]$ sudo service redis-server start
[vagrant@client1 ~]$ redis-cli ping
PONG
[vagrant@client1 ~]$
</code></p>

<p>If I'm building a puppet module that needs redis I can now add the following to it's init.pp ( or more properly create a module for redis and request it from the module I'm building )</p>

<p>```
  package { 'redis':</p>

<pre><code>ensure =&gt; 'present';
</code></pre>

<p>  }
```</p>

<p>Of course Debian/Ubuntu doesn't use Yum/RPM for package management.    I'd love to accept a pull request from somebody who wants to extend it to also support a local APT repository.   I left breadcrumbs in the <code>repository</code> module for some appropriate classes to be spliced in...</p>
]]></content>
  </entry>
  
</feed>
