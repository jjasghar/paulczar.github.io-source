<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: berkshelf | tech.paulcz.net]]></title>
  <link href="http://paulczar.github.com/blog/categories/berkshelf/atom.xml" rel="self"/>
  <link href="http://paulczar.github.com/"/>
  <updated>2014-05-13T15:39:20-05:00</updated>
  <id>http://paulczar.github.com/</id>
  <author>
    <name><![CDATA[Paul Czarkowski]]></name>
    <email><![CDATA[username.taken@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Creating immutable servers with chef and docker.io]]></title>
    <link href="http://paulczar.github.com/2013/09/creating-immutable-servers-with-chef-and-docker-dot-io.html"/>
    <updated>2013-09-07T18:18:00-05:00</updated>
    <id>http://paulczar.github.com/2013/09/creating-immutable-servers-with-chef-and-docker-dot-io</id>
    <content type="html"><![CDATA[<p>Building applications in a <a href="http://docker.io">docker.io</a> Dockerfile is relatively simple,  but sometimes you want to just install the application exactly as you would normally via already built chef cookbooks.   Turns out this is actually pretty simple.</p>

<p>The first thing you'll need to do is build a container with chef-client and berkshelf installed.   You can grab the one I've built by running <code>docker pull paulczar/chef-solo</code> or build one youself from a <code>Dockerfile</code> that looks a little something like the following...</p>

<!--more-->


<h3>Creating a docker.io container with chef and berkshelf</h3>

<p>``` ruby Dockerfile</p>

<h1>DOCKER-VERSION 0.5.3</h1>

<p>FROM ubuntu:12.10
MAINTAINER Paul Czarkowski "paul@paulcz.net"</p>

<p>RUN apt-get -y update
RUN apt-get -y install curl build-essential libxml2-dev libxslt-dev git
RUN curl -L https://www.opscode.com/chef/install.sh | bash
RUN echo "gem: --no-ri --no-rdoc" > ~/.gemrc
RUN /opt/chef/embedded/bin/gem install berkshelf
```</p>

<p><em>you'll notice I'm using the embedded chef ruby to install the berkshelf gem,  this is a handy shortcut to avoid messing around with random ruby versions from your distributions packaging.</em></p>

<p>run <code>$ docker build -t paulczar/chef-solo .</code> to build a usable docker container from the above <code>Dockerfile</code>.</p>

<h3>Using chef-solo and berkshelf to build an application in a docker.io container</h3>

<p>My <a href="https://github.com/paulczar/docker-chef-solo">example application</a> will install <code>Kibana3</code> to your docker container.   I'll step through how it works below.</p>

<h4>Chef-Solo</h4>

<p>To run <code>chef-solo</code> successfully we require two files.   <code>solo.rb</code> to set up file locations, and `solo.json' to set up the json / run list required for your application.</p>

<p>``` ruby chef.rb
root = File.absolute_path(File.dirname(<strong>FILE</strong>))</p>

<p>file_cache_path root
cookbook_path root + '/cookbooks'
```</p>

<p>``` json chef.json
{
  "kibana": {</p>

<pre><code>"webserver_listen": "0.0.0.0"
</code></pre>

<p>  },
  "run_list": [</p>

<pre><code>"recipe[kibana::default]"
</code></pre>

<p>  ]
}
```</p>

<h4>Berkshelf</h4>

<p>To run <code>berkshelf</code> we need to build a Berksfile which contains a list of all the chef cookbooks required for the applocation.   Berkshelf will download these cookbooks to a local directory which will be usable by chef-solo.</p>

<p>``` ruby Berksfile
site :opscode</p>

<p>cookbook 'build-essential'
cookbook 'apache2'
cookbook 'git'
cookbook 'kibana', github: 'lusis/chef-kibana'
cookbook 'nginx' , github: 'opscode-cookbooks/nginx'
```</p>

<p><em>You can see some of the cookbooks are being pulled from the opscode repository,  whereas others are being pulled directly from github.</em></p>

<h4>Dockerfile</h4>

<p>All that's left now is to create a Dockerfile that will bring it all together.</p>

<p>``` ruby Dockerfile</p>

<h1>DOCKER-VERSION 0.5.3</h1>

<p>FROM paulczar/chef-client
MAINTAINER Paul Czarkowski "paul@paulcz.net"</p>

<p>RUN apt-get -y update
ADD . /chef
RUN cd /chef &amp;&amp; /opt/chef/embedded/bin/berks install --path /chef/cookbooks
RUN chef-solo -c /chef/solo.rb -j /chef/solo.json
RUN echo "daemon off;" >> /etc/nginx/nginx.conf</p>

<p>CMD ["nginx"]
```</p>

<p>Run <code>$ docker build -t demo/kibana3 .</code> to build your application.</p>

<p>It will add the local files ( <code>solo.rb</code>, <code>solo.json</code>, <code>Berksfile</code> ) to /chef in the server and then call berkshelf to download the cookbooks and chef-solo to install your application.   Finally it will give <code>nginx</code> a directive to run in the foreground so that we don't have to do any sneaky prcess control to get it to work with the way <code>docker.io</code> runs processes.</p>

<p>To run the resultant <code>docker.io</code> container you simply need to run <code>$ docker run -d -p 80 demo/kibana3</code></p>
]]></content>
  </entry>
  
</feed>
